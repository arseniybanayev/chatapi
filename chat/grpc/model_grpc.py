# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: model.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import model_pb2


class NodeBase(abc.ABC):

    @abc.abstractmethod
    async def MessageLoop(self, stream: 'grpclib.server.Stream[model_pb2.ClientMsg, model_pb2.ServerMsg]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/pbx.Node/MessageLoop': grpclib.const.Handler(
                self.MessageLoop,
                grpclib.const.Cardinality.STREAM_STREAM,
                model_pb2.ClientMsg,
                model_pb2.ServerMsg,
            ),
        }


class NodeStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.MessageLoop = grpclib.client.StreamStreamMethod(
            channel,
            '/pbx.Node/MessageLoop',
            model_pb2.ClientMsg,
            model_pb2.ServerMsg,
        )


class PluginBase(abc.ABC):

    @abc.abstractmethod
    async def FireHose(self, stream: 'grpclib.server.Stream[model_pb2.ClientReq, model_pb2.ServerResp]') -> None:
        pass

    @abc.abstractmethod
    async def Find(self, stream: 'grpclib.server.Stream[model_pb2.SearchQuery, model_pb2.SearchFound]') -> None:
        pass

    @abc.abstractmethod
    async def Account(self, stream: 'grpclib.server.Stream[model_pb2.AccountEvent, model_pb2.Unused]') -> None:
        pass

    @abc.abstractmethod
    async def Topic(self, stream: 'grpclib.server.Stream[model_pb2.TopicEvent, model_pb2.Unused]') -> None:
        pass

    @abc.abstractmethod
    async def Subscription(self, stream: 'grpclib.server.Stream[model_pb2.SubscriptionEvent, model_pb2.Unused]') -> None:
        pass

    @abc.abstractmethod
    async def Message(self, stream: 'grpclib.server.Stream[model_pb2.MessageEvent, model_pb2.Unused]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/pbx.Plugin/FireHose': grpclib.const.Handler(
                self.FireHose,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.ClientReq,
                model_pb2.ServerResp,
            ),
            '/pbx.Plugin/Find': grpclib.const.Handler(
                self.Find,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.SearchQuery,
                model_pb2.SearchFound,
            ),
            '/pbx.Plugin/Account': grpclib.const.Handler(
                self.Account,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.AccountEvent,
                model_pb2.Unused,
            ),
            '/pbx.Plugin/Topic': grpclib.const.Handler(
                self.Topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.TopicEvent,
                model_pb2.Unused,
            ),
            '/pbx.Plugin/Subscription': grpclib.const.Handler(
                self.Subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.SubscriptionEvent,
                model_pb2.Unused,
            ),
            '/pbx.Plugin/Message': grpclib.const.Handler(
                self.Message,
                grpclib.const.Cardinality.UNARY_UNARY,
                model_pb2.MessageEvent,
                model_pb2.Unused,
            ),
        }


class PluginStub(PluginBase):

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.FireHose = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/FireHose',
            model_pb2.ClientReq,
            model_pb2.ServerResp,
        )
        self.Find = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/Find',
            model_pb2.SearchQuery,
            model_pb2.SearchFound,
        )
        self.Account = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/Account',
            model_pb2.AccountEvent,
            model_pb2.Unused,
        )
        self.Topic = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/Topic',
            model_pb2.TopicEvent,
            model_pb2.Unused,
        )
        self.Subscription = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/Subscription',
            model_pb2.SubscriptionEvent,
            model_pb2.Unused,
        )
        self.Message = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pbx.Plugin/Message',
            model_pb2.MessageEvent,
            model_pb2.Unused,
        )
